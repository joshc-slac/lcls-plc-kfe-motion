<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_IM1K3_PPM" Id="{50f223f3-f492-4ba9-a2f4-a4a386a50420}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_IM1K3_PPM
VAR
    {attribute 'pytmc' := 'pv: IM1K3:PPM'}
    {attribute 'TcLinkTo' := '.fbGige.iIlluminatorINT := TIIB[IM1K3-EL4004]^AO Outputs Channel 1^Analog output;
                              .fbGige.bGigePower := TIIB[IM1K3-EL2004]^Channel 2^Output;
                              .fbPowerMeter.iVoltageINT := TIIB[IM1K3-EL3062]^AI Standard Channel 1^Value;
                              .fbPowerMeter.fbThermoCouple.bError := TIIB[IM1K3-EL3314]^TC Inputs Channel 1^Status^Error;
                              .fbPowerMeter.fbThermoCouple.bUnderrange := TIIB[IM1K3-EL3314]^TC Inputs Channel 1^Status^Underrange;
                              .fbPowerMeter.fbThermoCouple.bOverrange := TIIB[IM1K3-EL3314]^TC Inputs Channel 1^Status^Overrange;
                              .fbPowerMeter.fbThermoCouple.iRaw := TIIB[IM1K3-EL3314]^TC Inputs Channel 1^Value;
                              .fbYagThermoCouple.bError := TIIB[IM1K3-EL3314]^TC Inputs Channel 2^Status^Error;
                              .fbYagThermoCouple.bUnderrange := TIIB[IM1K3-EL3314]^TC Inputs Channel 2^Status^Underrange;
                              .fbYagThermoCouple.bOverrange := TIIB[IM1K3-EL3314]^TC Inputs Channel 2^Status^Overrange;
                              .fbYagThermoCouple.iRaw := TIIB[IM1K3-EL3314]^TC Inputs Channel 2^Value;
                              .fbFlowSwitch.bFlowOk := TIIB[ST1K4-EL1004-E5]^Channel 3^Input'}
    fbIM1K3: FB_PPM;
    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState := (
        fVelocity := 15,
        bMoveOk := TRUE,
        bValid := TRUE
    );

    fbFakeFastFaultOutput: FB_HardwareFFOutput := (i_xVeto:=True);
    fbFakeArbiter3: FB_Arbiter(3);
    bM1K3_IN: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

fbStateSetup(stPositionState:=fbIM1K3.stOut, fPosition:=-9.1, sPmpsState:='IM1K3:PPM-OUT');
fbStateSetup(stPositionState:=fbIM1K3.stPower, fPosition:=-48.2, sPmpsState:='IM1K3:PPM-POWERMETER');
fbStateSetup(stPositionState:=fbIM1K3.stYag1, fPosition:=-72.2, sPmpsState:='IM1K3:PPM-YAG1');
fbStateSetup(stPositionState:=fbIM1K3.stYag2, fPosition:=-98.21, sPmpsState:='IM1K3:PPM-YAG2');

bM1K3_IN := NOT PMPS_GVL.stCurrentBeamParameters.aVetoDevices[PMPS.K_Stopper.MR1K3_OUT]
            AND PMPS_GVL.stCurrentBeamParameters.aVetoDevices[PMPS.K_Stopper.MR1K3_IN];

IF bM1K3_IN THEN
    fbIM1K3(
        fbFFHWO := GVL.fbFastFaultOutput2,
        fbArbiter := GVL.fbArbiter2,
        stYStage := Main.M4,
        sDeviceName := 'IM1K3:PPM',
        sTransitionKey := 'IM1K3:PPM-TRANSITION',
        bEnableMotion := TRUE,
        bEnableBeamParams := TRUE,
        bEnablePositionLimits := TRUE,
    );
ELSE
    fbIM1K3(
        fbFFHWO := fbFakeFastFaultOutput,
        fbArbiter := fbFakeArbiter3,
        stYStage := Main.M4,
        sDeviceName := 'IM1K3:PPM',
        sTransitionKey := 'IM1K3:PPM-TRANSITION',
        bEnableMotion := TRUE,
        bEnableBeamParams := TRUE,
        bEnablePositionLimits := TRUE,
    );
END_IF;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>